/*
input - 2->4->3->6->1->5->NULL
output- sorted LL without replacement of data only change the links
*/

#include <iostream>
#include <vector>
using namespace std;

class node
{
    public:

    int data;
    node* next;

    node(int d)
    {
        this->data = d;
        this->next = NULL;
    }
};

    void insert(int d,node* &tail, node* &head)
    {
        if(tail == NULL)
        {
            node* temp = new node(d);
            head = temp;
            tail = temp;
        }

        else
        {
            node* temp = new node(d);
            tail->next = temp;
            tail = temp;
        }
    }

void print(node* head )
{
    node* temp = head;

    while (temp != NULL)
    {
        cout<<"hi"<<" ";
        cout<<temp->data<<"->";
        temp = temp->next;
    }
    cout<<"NULL"<<endl;
}

node* middle(node* head)
{
    node* fast = head->next;
    node* slow = head;

 while (fast != NULL && fast->next != NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
    }

    return slow;
    
}

node* merg(node* left, node* right)
{
    if (left == NULL)
    {
        return right;
    }

    if (right == NULL)
    {
        return left;
    }

   node* ans = new node(-1);

   node* temp = ans;

   while (left != NULL && right != NULL)
   {
       if(left->data < right->data)
      { 
            temp->next = left;
            temp = left;
            left = left->next;
       }
       else
       {
            temp->next = right;
            temp = right;
            right = right->next;
       }

   }

   while (left != NULL)
   {
        temp->next = left;
        temp = left;
        left = left->next;
   }

   while (right != NULL)
   {
        temp->next = right;
        temp = right;
        right = right->next;
   }
   
   ans = ans->next;

   return ans; 
}

node* sort(node* head)
{
   if (head == NULL || head->next == NULL)
   {
       return head; 
   }

   node* mid = middle(head);
   mid->next = NULL;

   node* left = head;
   node* right = mid;

   left = sort(left);
   right = sort(right);

   node* result = merg(left,right);

    return result;

}

int main () 
{
     node* tail = NULL;
     node* head = NULL;
    insert(2,tail,head);
    insert(3,tail,head);
    insert(6,tail,head);
    insert(9,tail,head); 
    insert(1,tail,head); 
    insert(5,tail,head); 

    node* start = head;
    node* end = tail;

    // print(head);

   node* temp = sort(head);

    cout<<"hi"<<" ";
    print(temp);
}
